:TestSite
set "site=%~1"
set "specific_exclusions=%~2"
set "specific_inclusions=%~3"

for %%S in (%protocols%) do (
    set "specific_exclude_%%S="
    set "specific_include_%%S="
)
for %%S in (%protocols%) do (
    for %%E in (%specific_exclusions%) do if /i "%%E"=="%%S" set "specific_exclude_%%S=true"
    for %%I in (%specific_inclusions%) do if /i "%%I"=="%%S" set "specific_include_%%S=true"
)

set "output_dir=%temp%\test_site_results"
if not exist "%output_dir%" mkdir "%output_dir%"

:: Créer un fichier batch temporaire qui contient tout le code nécessaire
(
    echo @echo off
    echo setlocal enabledelayedexpansion
    
    :: Copier toutes les variables d'environnement nécessaires
    for /f "tokens=1,* delims==" %%a in ('set') do (
        echo set "%%a=%%b"
    )
    
    :: Ajouter les fonctions de test
    echo :TestPing4
    echo :: Test Ping IPv4
    echo set "protocol=ip4"
    echo call :verify_skip %site% %protocol%
    echo if "!skip_test!"=="true" (
    echo     set "cell_%protocol%_%site%=%COLOR_DASH%> "
    echo     exit /b
    echo )
    echo set "cell_%protocol%_%site%=%COLOR_WORKING%/ %COLOR_RESET%"
    echo ping -n 4 -4 %site% > "!output_dir!\%protocol%_debug_%site%.txt" 2>&1
    echo echo !errorlevel!> "!output_dir!\%protocol%_output_%site%.txt"
    echo for /f "usebackq tokens=*" %%r in (`type "!output_dir!\%protocol%_output_%site%.txt"`) do set "%protocol%_results_%site%=%%r"
    echo if "!%protocol%_results_%site%!"=="0" (
    echo     set "cell_%protocol%_%site%=%COLOR_OK%OK%COLOR_RESET%"
    echo     del "!output_dir!\%protocol%_debug_%site%.txt" >nul 2>&1
    echo ) else (
    echo     set "cell_%protocol%_%site%=%COLOR_KO%KO%COLOR_RESET%"
    echo )
    echo set /a tests_completed_weighted+=!WEIGHT_%protocol%!
    echo exit /b
    

    echo :TestPing6
    echo :: Test Ping IPv6
    echo set "protocol=ip6"
    echo call :verify_skip %site% %protocol%
    echo if "!skip_test!"=="true" (
    echo     set "cell_%protocol%_%site%=%COLOR_DASH%> "
    echo     exit /b
    echo )
    echo set "cell_%protocol%_%site%=%COLOR_WORKING%/ %COLOR_RESET%"
    echo ping -n 4 -6 %site% > "!output_dir!\%protocol%_debug_%site%.txt" 2>&1
    echo echo !errorlevel!> "!output_dir!\%protocol%_output_%site%.txt"
    echo for /f "usebackq tokens=*" %%r in (`type "!output_dir!\%protocol%_output_%site%.txt"`) do set "%protocol%_results_%site%=%%r"
    echo if "!%protocol%_results_%site%!"=="0" (
    echo     set "cell_%protocol%_%site%=%COLOR_OK%OK%COLOR_RESET%"
    echo     del "!output_dir!\%protocol%_debug_%site%.txt" >nul 2>&1
    echo ) else (
    echo     set "cell_%protocol%_%site%=%COLOR_KO%KO%COLOR_RESET%"
    echo )
    echo set /a tests_completed_weighted+=!WEIGHT_%protocol%!
    echo exit /b
    

    echo :TestTracert4
    echo :: Test Tracert IPv4
    echo set "protocol=tr4"
    echo call :verify_skip %site% %protocol%
    echo if "!skip_test!"=="true" (
    echo     set "cell_%protocol%_%site%=%COLOR_DASH%> "
    echo     exit /b
    echo )
    echo set "cell_%protocol%_%site%=%COLOR_WORKING%/ %COLOR_RESET%"
    echo tracert -h 5 -4 %site% > "!output_dir!\%protocol%_debug_%site%.txt" 2>&1
    echo call :CountTracertHops "!output_dir!\%protocol%_debug_%site%.txt" %protocol% %site%
    echo echo !count! > "!output_dir!\%protocol%_output_%site%.txt"
    echo if !count! GEQ 2 (
    echo     set "cell_%protocol%_%site%=%COLOR_OK%OK%COLOR_RESET%"
    echo     del "!output_dir!\%protocol%_debug_%site%.txt" >nul 2>&1
    echo ) else (
    echo     set "cell_%protocol%_%site%=%COLOR_KO%KO%COLOR_RESET%"
    echo )
    echo set /a tests_completed_weighted+=!WEIGHT_%protocol%!
    echo exit /b
    

    echo :TestTracert6
    echo :: Test Tracert IPv6
    echo set "protocol=tr6"
    echo call :verify_skip %site% %protocol%
    echo if "!skip_test!"=="true" (
    echo     set "cell_%protocol%_%site%=%COLOR_DASH%> "
    echo     exit /b
    echo )
    echo set "cell_%protocol%_%site%=%COLOR_WORKING%/ %COLOR_RESET%"
    echo tracert -h 5 -6 %site% > "!output_dir!\%protocol%_debug_%site%.txt" 2>&1
    echo call :CountTracertHops "!output_dir!\%protocol%_debug_%site%.txt" %protocol% %site%
    echo echo !count! > "!output_dir!\%protocol%_output_%site%.txt"
    echo if !count! GEQ 2 (
    echo     set "cell_%protocol%_%site%=%COLOR_OK%OK%COLOR_RESET%"
    echo     del "!output_dir!\%protocol%_debug_%site%.txt" >nul 2>&1
    echo ) else (
    echo     set "cell_%protocol%_%site%=%COLOR_KO%KO%COLOR_RESET%"
    echo )
    echo set /a tests_completed_weighted+=!WEIGHT_%protocol%!
    echo exit /b

    
    echo :TestTLS
    echo :: Test TLS Handshake
    echo set "protocol=tls"
    echo call :verify_skip %site% %protocol%
    echo if "!skip_test!"=="true" (
    echo     set "cell_%protocol%_%site%=%COLOR_DASH%> "
    echo     exit /b
    echo )
    echo set "cell_%protocol%_%site%=%COLOR_WORKING%/ %COLOR_RESET%"
    echo chcp 437 >nul
    echo powershell -NoProfile -ExecutionPolicy Bypass -Command ^
    echo "try { ^
    echo     if ('%site%' -match '^https?://') {$site = '%site%' -replace '^https?://', ''} ^
    echo     else {$site = '%site%'}; ^
    echo     $tcpClient = New-Object System.Net.Sockets.TcpClient; ^
    echo     $tcpClient.Connect($site, 443); ^
    echo     $sslStream = New-Object System.Net.Security.SslStream($tcpClient.GetStream(), $false); ^
    echo     $sslStream.AuthenticateAsClient($site, $null, [System.Security.Authentication.SslProtocols]::Tls12, $false); ^
    echo     if ($sslStream.IsAuthenticated) { '1' ^| Out-File -FilePath '!output_dir!\%protocol%_output_%site%.txt' } ^
    echo } catch { ^
    echo     $_ ^| Out-File -FilePath '!output_dir!\%protocol%_debug_%site%.txt'; ^
    echo     '0' ^| Out-File -FilePath '!output_dir!\%protocol%_output_%site%.txt'; ^
    echo } finally { ^
    echo     if ($sslStream) { $sslStream.Dispose() }; ^
    echo     if ($tcpClient) { $tcpClient.Dispose() }; ^
    echo }"
    echo chcp 65001 >nul
    echo for /f "usebackq tokens=*" %%r in (`type "!output_dir!\%protocol%_output_%site%.txt"`) do set "%protocol%_results_%site%=%%r"
    echo if "!%protocol%_results_%site%!"=="1" (
    echo     set "cell_%protocol%_%site%=%COLOR_OK%OK%COLOR_RESET%"
    echo     del "!output_dir!\%protocol%_debug_%site%.txt" >nul 2>&1
    echo ) else (
    echo     set "cell_%protocol%_%site%=%COLOR_KO%KO%COLOR_RESET%"
    echo )
    echo set /a tests_completed_weighted+=!WEIGHT_%protocol%!
    echo exit /b

    
    echo :TestHTTPS
    echo :: Test HTTPS
    echo set "protocol=htp"
    echo call :verify_skip %site% %protocol%
    echo if "!skip_test!"=="true" (
    echo     set "cell_%protocol%_%site%=%COLOR_DASH%> "
    echo     exit /b
    echo )
    echo set "cell_%protocol%_%site%=%COLOR_WORKING%/ %COLOR_RESET%"
    echo chcp 437 >nul
    echo powershell -NoProfile -ExecutionPolicy Bypass -Command ^
    echo "try { ^
    echo     if ('%site%' -notmatch '^https?://') {$site = 'https://%site%'} ^
    echo     elseif ('%site%' -match '^http://') {$site = '%site%' -replace '^http://', 'https://'} ^
    echo     else {$site = '%site%'}; ^
    echo     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; ^
    echo     $response = Invoke-WebRequest -Uri $site -UseBasicParsing -TimeoutSec 5; ^
    echo     if ($response.StatusCode -eq 200) { '1' ^| Out-File -FilePath '!output_dir!\%protocol%_output_%site%.txt' } ^
    echo     else { '0' ^| Out-File -FilePath '!output_dir!\%protocol%_output_%site%.txt' }; ^
    echo } catch { ^
    echo     $_ ^| Out-File -FilePath '!output_dir!\%protocol%_debug_%site%.txt'; ^
    echo     '0' ^| Out-File -FilePath '!output_dir!\%protocol%_output_%site%.txt'; ^
    echo }"
    echo chcp 65001 >nul
    echo for /f "usebackq tokens=*" %%r in (`type "!output_dir!\%protocol%_output_%site%.txt"`) do set "%protocol%_results_%site%=%%r"
    echo if "!%protocol%_results_%site%!"=="1" (
    echo     set "cell_%protocol%_%site%=%COLOR_OK%OK%COLOR_RESET%"
    echo     del "!output_dir!\%protocol%_debug_%site%.txt" >nul 2>&1
    echo ) else (
    echo     set "cell_%protocol%_%site%=%COLOR_KO%KO%COLOR_RESET%"
    echo )
    echo set /a tests_completed_weighted+=!WEIGHT_%protocol%!
    echo exit /b

    
    echo :TestDNS
    echo :: Test DNS
    echo set "protocol=dns"
    echo call :verify_skip %site% %protocol%
    echo if "!skip_test!"=="true" (
    echo     set "cell_%protocol%_%site%=%COLOR_DASH%> "
    echo     exit /b
    echo )
    echo set "cell_%protocol%_%site%=%COLOR_WORKING%/ %COLOR_RESET%"
    echo nslookup -type=AAAA %site% > "!output_dir!\%protocol%_debug_%site%.txt" 2>&1
    echo set "firstLine=" & set "lastLine="
    echo for /f "tokens=* delims=" %%L in (!output_dir!\%protocol%_debug_%site%.txt) do (
    echo     if not defined firstLine (set "firstLine=%%L") else (set "lastLine=%%L")
    echo )
    echo echo %firstLine% %lastLine% | findstr /c:"Timed out" /c:"No response from server" /c:"No records" /c:"Non-existent domain" ^
    echo     /c:"Connection refused" /c:"Network is unreachable" /c:"Server failure" /c:"Refused" /c:"Format error" >nul
    echo if errorlevel 1 (
    echo     echo 1 > "!output_dir!\%protocol%_output_%site%.txt"
    echo     set "dns_results_%site%=1"
    echo     set "cell_%protocol%_%site%=%COLOR_OK%OK%COLOR_RESET%"
    echo     del "!output_dir!\%protocol%_debug_%site%.txt" >nul 2>&1
    echo ) else (
    echo     echo 0 > "!output_dir!\%protocol%_output_%site%.txt"
    echo     set "dns_results_%site%=0"
    echo     set "cell_%protocol%_%site%=%COLOR_KO%KO%COLOR_RESET%"
    echo )
    echo set /a tests_completed_weighted+=!WEIGHT_%protocol%!
    echo exit /b
    
    :: Ajouter les fonctions auxiliaires
    echo :verify_skip
    echo set "site=%~1"
    echo set "protocol=%~2"
    echo set "skip_test=false"
    echo if      defined specific_include_%protocol% (set "skip_test=false") ^
    echo else if defined specific_exclude_%protocol% (set "skip_test=true" ) ^
    echo else if defined global_only_%protocol%      (set "skip_test=false") ^
    echo else if defined global_exclude_%protocol%   (set "skip_test=true" )
    echo goto :eof
    
    echo :CountTracertHops
    echo setlocal enabledelayedexpansion
    echo set count=0
    echo findstr /r /v "^$" "%~1" > "!output_dir!\%~2_%~3_temp1.txt"
    echo more +2 "!output_dir!\%~2_%~3_temp1.txt" > "!output_dir!\%~2_%~3_temp2.txt"
    echo findstr /v /c:"Trace complete." "!output_dir!\%~2_%~3_temp2.txt" > "!output_dir!\%~2_%~3_temp3.txt"
    echo for /f "usebackq tokens=* delims=" %%a in ("!output_dir!\%~2_%~3_temp3.txt") do (
    echo     set "line=%%a"
    echo     for %%b in (!line!) do set "word=%%b"
    echo     set "ip=!word:*[=!"
    echo     set "ip=!ip:]=!"
    echo     if "!ip!"=="!word!" (set "addr=!word!") else set "addr=!ip!"
    echo     echo !addr! | findstr /r "[0-9]" >nul
    echo     if not errorlevel 1 (
    echo         call :CountChar "!addr!" "." dots
    echo         call :CountChar "!addr!" ":" colons
    echo         if !dots! geq 2 (set /a count+=1) else if !colons! geq 2 set /a count+=1
    echo     )
    echo )
    echo endlocal & set "count=%count%"
    echo goto :eof
    
    :: Point d'entrée principal - exécute la fonction spécifiée
    echo goto %%1
) > "%output_dir%\run_test.bat"

:: Lancer tous les tests en parallèle
start "" cmd /c ""%output_dir%\run_test.bat" call :TestPing4 %site%"
start "" cmd /c ""%output_dir%\run_test.bat" call :TestPing6 %site%"
start "" cmd /c ""%output_dir%\run_test.bat" call :TestTracert4 %site%"
start "" cmd /c ""%output_dir%\run_test.bat" call :TestTracert6 %site%"
start "" cmd /c ""%output_dir%\run_test.bat" call :TestTLS %site%"
start "" cmd /c ""%output_dir%\run_test.bat" call :TestHTTPS %site%"
start "" cmd /c ""%output_dir%\run_test.bat" call :TestDNS %site%"

:: Attendre la fin des tests
call :WaitForTestsCompletion

:: Nettoyer les fichiers temporaires
del "%output_dir%\run_test.bat" 2>nul

:: Mise à jour de la table finale
call :UpdateProgress
call :PrintTable
goto :eof


:WaitForTestsCompletion
:: Boucle pour attendre la fin des tests
:wait_loop
set "incomplete=false"
for %%P in (ip4 ip6 tr4 tr6 tls htp dns) do (
    if not exist "%output_dir%\%%P_output_%site%.txt" set "incomplete=true"
)
if "!incomplete!"=="true" (
    timeout /t 1 >nul
    goto :wait_loop
)
goto :eof
